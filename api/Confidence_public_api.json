[
  {
    "className": "Confidence",
    "apiFunctions": [
      {
        "name": "activate()",
        "declaration": "public func activate() throws"
      },
      {
        "name": "fetchAndActivate()",
        "declaration": "public func fetchAndActivate() async throws"
      },
      {
        "name": "asyncFetch()",
        "declaration": "public func asyncFetch() async"
      },
      {
        "name": "isStorageEmpty()",
        "declaration": "public func isStorageEmpty() -> Bool"
      },
      {
        "name": "getEvaluation(key:defaultValue:)",
        "declaration": "public func getEvaluation<T>(key: String, defaultValue: T) -> Evaluation<T>"
      },
      {
        "name": "getValue(key:defaultValue:)",
        "declaration": "public func getValue<T>(key: String, defaultValue: T) -> T"
      },
      {
        "name": "getContext()",
        "declaration": "public func getContext() -> ConfidenceStruct"
      },
      {
        "name": "putContextAndWait(key:value:)",
        "declaration": "public func putContextAndWait(key: String, value: ConfidenceValue) async"
      },
      {
        "name": "putContextAndWait(context:removedKeys:)",
        "declaration": "public func putContextAndWait(context: ConfidenceStruct, removedKeys: [String] = []) async"
      },
      {
        "name": "putContextAndWait(context:)",
        "declaration": "public func putContextAndWait(context: ConfidenceStruct) async"
      },
      {
        "name": "removeContextAndWait(key:)",
        "declaration": "public func removeContextAndWait(key: String) async"
      },
      {
        "name": "putContextLocal(context:removeKeys:)",
        "declaration": "public func putContextLocal(context: ConfidenceStruct, removeKeys removedKeys: [String] = [])"
      },
      {
        "name": "putContext(key:value:)",
        "declaration": "public func putContext(key: String, value: ConfidenceValue)"
      },
      {
        "name": "putContext(context:)",
        "declaration": "public func putContext(context: ConfidenceStruct)"
      },
      {
        "name": "putContext(context:removeKeys:)",
        "declaration": "public func putContext(context: ConfidenceStruct, removeKeys removedKeys: [String] = [])"
      },
      {
        "name": "removeContext(key:)",
        "declaration": "public func removeContext(key: String)"
      },
      {
        "name": "putContext(context:removedKeys:)",
        "declaration": "public func putContext(context: ConfidenceStruct, removedKeys: [String])"
      },
      {
        "name": "awaitReconciliation()",
        "declaration": "public func awaitReconciliation() async"
      },
      {
        "name": "withContext(_:)",
        "declaration": "public func withContext(_ context: ConfidenceStruct) -> ConfidenceEventSender"
      },
      {
        "name": "track(producer:)",
        "declaration": "public func track(producer: ConfidenceProducer)"
      },
      {
        "name": "track(eventName:data:)",
        "declaration": "public func track(eventName: String, data: ConfidenceStruct) throws"
      },
      {
        "name": "flush()",
        "declaration": "public func flush()"
      }
    ]
  },
  {
    "className": "Builder",
    "apiFunctions": [
      {
        "name": "init(clientSecret:loggerLevel:)",
        "declaration": "public init(clientSecret: String, loggerLevel: LoggerLevel = .WARN)"
      },
      {
        "name": "withContext(initialContext:)",
        "declaration": "public func withContext(initialContext: ConfidenceStruct) -> Builder"
      },
      {
        "name": "withRegion(region:)",
        "declaration": "public func withRegion(region: ConfidenceRegion) -> Builder"
      },
      {
        "name": "withTimeout(timeout:)",
        "declaration": "public func withTimeout(timeout: Double) -> Builder"
      },
      {
        "name": "build()",
        "declaration": "public func build() -> Confidence"
      }
    ]
  },
  {
    "className": "ConfidenceDeviceInfoContextDecorator",
    "apiFunctions": [
      {
        "name": "init(withDeviceInfo:withAppInfo:withOsInfo:withLocale:)",
        "declaration": "public init(\n    withDeviceInfo: Bool = false,\n    withAppInfo: Bool = false,\n    withOsInfo: Bool = false,\n    withLocale: Bool = false\n)"
      },
      {
        "name": "decorated(context:)",
        "declaration": "public func decorated(context contextToDecorate: [String: ConfidenceValue]) -> [String: ConfidenceValue]"
      }
    ]
  },
  {
    "className": "Event",
    "apiFunctions": [
      {
        "name": "init(name:data:shouldFlush:)",
        "declaration": "public init(name: String, data: ConfidenceStruct = [:], shouldFlush: Bool = false)"
      }
    ]
  },
  {
    "className": "ConfidenceScreenTracker",
    "apiFunctions": [
      {
        "name": "init()",
        "declaration": "public init()"
      },
      {
        "name": "produceEvents()",
        "declaration": "public func produceEvents() -> AnyPublisher<Event, Never>"
      }
    ]
  },
  {
    "className": "ConfidenceValue",
    "apiFunctions": [
      {
        "name": "init(from:)",
        "declaration": "public required init(from decoder: Decoder) throws"
      },
      {
        "name": "init(boolean:)",
        "declaration": "public init(boolean: Bool)"
      },
      {
        "name": "init(string:)",
        "declaration": "public init(string: String)"
      },
      {
        "name": "init(integer:)",
        "declaration": "public init(integer: Int)"
      },
      {
        "name": "init(double:)",
        "declaration": "public init(double: Double)"
      },
      {
        "name": "init(date:)",
        "declaration": "public init(date: DateComponents)"
      },
      {
        "name": "init(timestamp:)",
        "declaration": "public init(timestamp: Date)"
      },
      {
        "name": "init(booleanList:)",
        "declaration": "public init(booleanList: [Bool])"
      },
      {
        "name": "init(stringList:)",
        "declaration": "public init(stringList: [String])"
      },
      {
        "name": "init(integerList:)",
        "declaration": "public init(integerList: [Int])"
      },
      {
        "name": "init(doubleList:)",
        "declaration": "public init(doubleList: [Double])"
      },
      {
        "name": "init(nullList:)",
        "declaration": "public init(nullList: [()])"
      },
      {
        "name": "init(dateList:)",
        "declaration": "public init(dateList: [DateComponents])"
      },
      {
        "name": "init(timestampList:)",
        "declaration": "public init(timestampList: [Date])"
      },
      {
        "name": "init(structure:)",
        "declaration": "public init(structure: [String: ConfidenceValue])"
      },
      {
        "name": "init(null:)",
        "declaration": "public init(null: ())"
      },
      {
        "name": "asBoolean()",
        "declaration": "public func asBoolean() -> Bool?"
      },
      {
        "name": "asString()",
        "declaration": "public func asString() -> String?"
      },
      {
        "name": "asInteger()",
        "declaration": "public func asInteger() -> Int?"
      },
      {
        "name": "asDouble()",
        "declaration": "public func asDouble() -> Double?"
      },
      {
        "name": "asDateComponents()",
        "declaration": "public func asDateComponents() -> DateComponents?"
      },
      {
        "name": "asDate()",
        "declaration": "public func asDate() -> Date?"
      },
      {
        "name": "asList()",
        "declaration": "public func asList() -> [ConfidenceValue]?"
      },
      {
        "name": "asStructure()",
        "declaration": "public func asStructure() -> [String: ConfidenceValue]?"
      },
      {
        "name": "asStructureNative()",
        "declaration": "public func asStructureNative() -> [String: Any]?"
      },
      {
        "name": "isNull()",
        "declaration": "public func isNull() -> Bool"
      },
      {
        "name": "type()",
        "declaration": "public func type() -> ConfidenceValueType"
      },
      {
        "name": "==(_:_:)",
        "declaration": "public static func == (lhs: ConfidenceValue, rhs: ConfidenceValue) -> Bool"
      }
    ]
  }
]