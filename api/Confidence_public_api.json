[
  {
    "className": "Confidence",
    "apiFunctions": [
      {
        "name": "activate()",
        "declaration": "public func activate() throws"
      },
      {
        "name": "fetchAndActivate()",
        "declaration": "public func fetchAndActivate() async throws"
      },
      {
        "name": "asyncFetch()",
        "declaration": "public func asyncFetch()"
      },
      {
        "name": "getEvaluation(key:defaultValue:)",
        "declaration": "public func getEvaluation<T>(key: String, defaultValue: T) throws -> Evaluation<T>"
      },
      {
        "name": "getValue(key:defaultValue:)",
        "declaration": "public func getValue<T>(key: String, defaultValue: T) -> T"
      },
      {
        "name": "contextChanges()",
        "declaration": "public func contextChanges() -> AnyPublisher<ConfidenceStruct, Never>"
      },
      {
        "name": "track(eventName:data:)",
        "declaration": "public func track(eventName: String, data: ConfidenceStruct) throws"
      },
      {
        "name": "track(producer:)",
        "declaration": "public func track(producer: ConfidenceProducer)"
      },
      {
        "name": "flush()",
        "declaration": "public func flush()"
      },
      {
        "name": "getContext()",
        "declaration": "public func getContext() -> ConfidenceStruct"
      },
      {
        "name": "putContext(key:value:)",
        "declaration": "public func putContext(key: String, value: ConfidenceValue)"
      },
      {
        "name": "putContext(context:)",
        "declaration": "public func putContext(context: ConfidenceStruct)"
      },
      {
        "name": "putContext(context:removeKeys:)",
        "declaration": "public func putContext(context: ConfidenceStruct, removeKeys removedKeys: [String] = [])"
      },
      {
        "name": "removeKey(key:)",
        "declaration": "public func removeKey(key: String)"
      },
      {
        "name": "withContext(_:)",
        "declaration": "public func withContext(_ context: ConfidenceStruct) -> ConfidenceEventSender"
      }
    ]
  },
  {
    "className": "Builder",
    "apiFunctions": [
      {
        "name": "init(clientSecret:loggerLevel:)",
        "declaration": "public init(clientSecret: String, loggerLevel: LoggerLevel = .WARN)"
      },
      {
        "name": "withContext(initialContext:)",
        "declaration": "public func withContext(initialContext: ConfidenceStruct) -> Builder"
      },
      {
        "name": "withRegion(region:)",
        "declaration": "public func withRegion(region: ConfidenceRegion) -> Builder"
      },
      {
        "name": "build()",
        "declaration": "public func build() -> Confidence"
      }
    ]
  },
  {
    "className": "ConfidenceAppLifecycleProducer",
    "apiFunctions": [
      {
        "name": "init()",
        "declaration": "public init()"
      },
      {
        "name": "deinit",
        "declaration": "deinit"
      },
      {
        "name": "produceEvents()",
        "declaration": "public func produceEvents() -> AnyPublisher<Event, Never>"
      },
      {
        "name": "produceContexts()",
        "declaration": "public func produceContexts() -> AnyPublisher<ConfidenceStruct, Never>"
      }
    ]
  },
  {
    "className": "ConfidenceClientOptions",
    "apiFunctions": [
      {
        "name": "init(credentials:region:initializationStrategy:)",
        "declaration": "public init(\n    credentials: ConfidenceClientCredentials,\n    region: ConfidenceRegion? = nil,\n    initializationStrategy: InitializationStrategy = .fetchAndActivate\n)"
      }
    ]
  },
  {
    "className": "ConfidenceClientCredentials",
    "apiFunctions": [
      {
        "name": "getSecret()",
        "declaration": "public func getSecret() -> String"
      }
    ]
  },
  {
    "className": "ConfidenceMetadata",
    "apiFunctions": [
      {
        "name": "init(name:version:)",
        "declaration": "public init(name: String, version: String)"
      }
    ]
  },
  {
    "className": "Event",
    "apiFunctions": [
      {
        "name": "init(name:data:shouldFlush:)",
        "declaration": "public init(name: String, data: ConfidenceStruct = [:], shouldFlush: Bool = false)"
      }
    ]
  },
  {
    "className": "ConfidenceScreenTracker",
    "apiFunctions": [
      {
        "name": "init()",
        "declaration": "public init()"
      },
      {
        "name": "produceEvents()",
        "declaration": "public func produceEvents() -> AnyPublisher<Event, Never>"
      }
    ]
  },
  {
    "className": "ConfidenceValue",
    "apiFunctions": [
      {
        "name": "init(from:)",
        "declaration": "public required init(from decoder: Decoder) throws"
      },
      {
        "name": "init(boolean:)",
        "declaration": "public init(boolean: Bool)"
      },
      {
        "name": "init(string:)",
        "declaration": "public init(string: String)"
      },
      {
        "name": "init(integer:)",
        "declaration": "public init(integer: Int)"
      },
      {
        "name": "init(double:)",
        "declaration": "public init(double: Double)"
      },
      {
        "name": "init(date:)",
        "declaration": "public init(date: DateComponents)"
      },
      {
        "name": "init(timestamp:)",
        "declaration": "public init(timestamp: Date)"
      },
      {
        "name": "init(booleanList:)",
        "declaration": "public init(booleanList: [Bool])"
      },
      {
        "name": "init(stringList:)",
        "declaration": "public init(stringList: [String])"
      },
      {
        "name": "init(integerList:)",
        "declaration": "public init(integerList: [Int])"
      },
      {
        "name": "init(doubleList:)",
        "declaration": "public init(doubleList: [Double])"
      },
      {
        "name": "init(nullList:)",
        "declaration": "public init(nullList: [()])"
      },
      {
        "name": "init(dateList:)",
        "declaration": "public init(dateList: [DateComponents])"
      },
      {
        "name": "init(timestampList:)",
        "declaration": "public init(timestampList: [Date])"
      },
      {
        "name": "init(structure:)",
        "declaration": "public init(structure: [String: ConfidenceValue])"
      },
      {
        "name": "init(null:)",
        "declaration": "public init(null: ())"
      },
      {
        "name": "asBoolean()",
        "declaration": "public func asBoolean() -> Bool?"
      },
      {
        "name": "asString()",
        "declaration": "public func asString() -> String?"
      },
      {
        "name": "asInteger()",
        "declaration": "public func asInteger() -> Int?"
      },
      {
        "name": "asDouble()",
        "declaration": "public func asDouble() -> Double?"
      },
      {
        "name": "asDateComponents()",
        "declaration": "public func asDateComponents() -> DateComponents?"
      },
      {
        "name": "asDate()",
        "declaration": "public func asDate() -> Date?"
      },
      {
        "name": "asList()",
        "declaration": "public func asList() -> [ConfidenceValue]?"
      },
      {
        "name": "asStructure()",
        "declaration": "public func asStructure() -> [String: ConfidenceValue]?"
      },
      {
        "name": "isNull()",
        "declaration": "public func isNull() -> Bool"
      },
      {
        "name": "type()",
        "declaration": "public func type() -> ConfidenceValueType"
      },
      {
        "name": "==(_:_:)",
        "declaration": "public static func == (lhs: ConfidenceValue, rhs: ConfidenceValue) -> Bool"
      }
    ]
  },
  {
    "className": "DefaultStorage",
    "apiFunctions": [
      {
        "name": "init(filePath:)",
        "declaration": "public init(filePath: String)"
      },
      {
        "name": "save(data:)",
        "declaration": "public func save(data: Encodable) throws"
      },
      {
        "name": "load(defaultValue:)",
        "declaration": "public func load<T>(defaultValue: T) throws -> T where T: Decodable"
      },
      {
        "name": "clear()",
        "declaration": "public func clear() throws"
      },
      {
        "name": "isEmpty()",
        "declaration": "public func isEmpty() -> Bool"
      },
      {
        "name": "getConfigUrl()",
        "declaration": "public func getConfigUrl() throws -> URL"
      }
    ]
  },
  {
    "className": "FlagPath",
    "apiFunctions": [
      {
        "name": "getPath(for:)",
        "declaration": "public static func getPath(for path: String) throws -> FlagPath"
      }
    ]
  },
  {
    "className": "HttpClientResponse",
    "apiFunctions": [
      {
        "name": "init(decodedData:decodedError:response:)",
        "declaration": "public init(decodedData: T? = nil, decodedError: HttpError? = nil, response: HTTPURLResponse)"
      }
    ]
  },
  {
    "className": "HttpError",
    "apiFunctions": [
      {
        "name": "init(code:message:details:)",
        "declaration": "public init(code: Int, message: String, details: [String])"
      }
    ]
  },
  {
    "className": "NetworkClient",
    "apiFunctions": [
      {
        "name": "init(session:baseUrl:defaultHeaders:retry:)",
        "declaration": "public init(\n    session: URLSession? = nil,\n    baseUrl: String,\n    defaultHeaders: [String: String] = [:],\n    retry: Retry = .none\n)"
      },
      {
        "name": "post(path:data:)",
        "declaration": "public func post<T: Decodable>(\n    path: String,\n    data: Encodable\n) async throws -> HttpClientResult<T>"
      }
    ]
  },
  {
    "className": "ExponentialBackoffRetryHandler",
    "apiFunctions": [
      {
        "name": "retryIn()",
        "declaration": "public func retryIn() -> TimeInterval?"
      }
    ]
  },
  {
    "className": "NoneRetryHandler",
    "apiFunctions": [
      {
        "name": "retryIn()",
        "declaration": "public func retryIn() -> TimeInterval?"
      }
    ]
  },
  {
    "className": "NetworkStruct",
    "apiFunctions": [
      {
        "name": "init(fields:)",
        "declaration": "public init(fields: [String: NetworkValue])"
      }
    ]
  },
  {
    "className": "RemoteConfidenceResolveClient",
    "apiFunctions": [
      {
        "name": "resolve(flags:ctx:)",
        "declaration": "public func resolve(flags: [String], ctx: ConfidenceStruct) async throws -> ResolvesResult"
      },
      {
        "name": "resolve(ctx:)",
        "declaration": "public func resolve(ctx: ConfidenceStruct) async throws -> ResolvesResult"
      }
    ]
  }
]