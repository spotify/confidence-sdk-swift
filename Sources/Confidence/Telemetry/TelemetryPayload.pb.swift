// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Sources/Confidence/Telemetry/TelemetryPayload.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TraceId: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case traceUnspecified // = 0
  case traceStale // = 1
  case traceTypeMismatch // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .traceUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .traceUnspecified
    case 1: self = .traceStale
    case 2: self = .traceTypeMismatch
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .traceUnspecified: return 0
    case .traceStale: return 1
    case .traceTypeMismatch: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TraceId: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [TraceId] = [
    .traceUnspecified,
    .traceStale,
    .traceTypeMismatch,
  ]
}

#endif  // swift(>=4.2)

enum SdkId: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case sdkUnknown // = 0
  case sdkSwiftCore // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .sdkUnknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .sdkUnknown
    case 1: self = .sdkSwiftCore
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .sdkUnknown: return 0
    case .sdkSwiftCore: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension SdkId: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SdkId] = [
    .sdkUnknown,
    .sdkSwiftCore,
  ]
}

#endif  // swift(>=4.2)

struct LibraryData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var libraryID: SdkId = .sdkUnknown

  var libraryVersion: String = String()

  var countTraces: [CountTrace] = []

  var durationsTraces: [AverageDurationTrace] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CountTrace {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var traceID: TraceId = .traceUnspecified

  var count: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct AverageDurationTrace {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var traceID: TraceId = .traceUnspecified

  var millisAverage: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension TraceId: @unchecked Sendable {}
extension SdkId: @unchecked Sendable {}
extension LibraryData: @unchecked Sendable {}
extension CountTrace: @unchecked Sendable {}
extension AverageDurationTrace: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension TraceId: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TRACE_UNSPECIFIED"),
    1: .same(proto: "TRACE_STALE"),
    2: .same(proto: "TRACE_TYPE_MISMATCH"),
  ]
}

extension SdkId: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SDK_UNKNOWN"),
    1: .same(proto: "SDK_SWIFT_CORE"),
  ]
}

extension LibraryData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "LibraryData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "libraryId"),
    2: .same(proto: "libraryVersion"),
    3: .same(proto: "countTraces"),
    4: .same(proto: "durationsTraces"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.libraryID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.libraryVersion) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.countTraces) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.durationsTraces) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.libraryID != .sdkUnknown {
      try visitor.visitSingularEnumField(value: self.libraryID, fieldNumber: 1)
    }
    if !self.libraryVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.libraryVersion, fieldNumber: 2)
    }
    if !self.countTraces.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.countTraces, fieldNumber: 3)
    }
    if !self.durationsTraces.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.durationsTraces, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: LibraryData, rhs: LibraryData) -> Bool {
    if lhs.libraryID != rhs.libraryID {return false}
    if lhs.libraryVersion != rhs.libraryVersion {return false}
    if lhs.countTraces != rhs.countTraces {return false}
    if lhs.durationsTraces != rhs.durationsTraces {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CountTrace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CountTrace"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "traceId"),
    2: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.traceID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.traceID != .traceUnspecified {
      try visitor.visitSingularEnumField(value: self.traceID, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CountTrace, rhs: CountTrace) -> Bool {
    if lhs.traceID != rhs.traceID {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AverageDurationTrace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AverageDurationTrace"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "traceId"),
    2: .same(proto: "millisAverage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.traceID) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.millisAverage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.traceID != .traceUnspecified {
      try visitor.visitSingularEnumField(value: self.traceID, fieldNumber: 1)
    }
    if self.millisAverage != 0 {
      try visitor.visitSingularFloatField(value: self.millisAverage, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AverageDurationTrace, rhs: AverageDurationTrace) -> Bool {
    if lhs.traceID != rhs.traceID {return false}
    if lhs.millisAverage != rhs.millisAverage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
